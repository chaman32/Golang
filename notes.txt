package api

import (
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"kvstore/internal/service"
	"log"
	"net/http"

	"strconv"
)

// type controller struct {
// 	userIDPattern *regexp.Regexp
// }

func registerHandlers() {
	//sc := newStoreHandler()
	//http.Handle("/store", sc)
	//http.Handle("/store/", sc)
	http.HandleFunc("GET /store/{id}", getHandler)
}

type ErrorResponse struct {
	Error   string `json:"error"`
	Message string `json:"message"`
}

func encodeResponseAsJSON(data interface{}, w http.ResponseWriter) {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	enc := json.NewEncoder(w)
	if err := enc.Encode(data); err != nil {
		log.Println("encodeResponseAsJSON:", err)
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
}

// func newStoreHandler() *controller {
// 	return &controller{
// 		userIDPattern: regexp.MustCompile(`^/store/(\d+)/?`),
// 	}
// }

// func (c *controller) ServeHTTP(w http.ResponseWriter, r *http.Request) {
// 	if r.URL.Path == "/store" {
// 		switch r.Method {
// 		case http.MethodGet:
// 			//uc.getValue(w, r)
// 		case http.MethodPost:
// 			c.post(w, r)
// 		default:
// 			w.WriteHeader(http.StatusNotImplemented)
// 		}
// 	} else {
// 		matches := c.userIDPattern.FindStringSubmatch(r.URL.Path)
// 		if len(matches) == 0 {
// 			w.WriteHeader(http.StatusNotFound)
// 			return
// 		}
// 		id, err := strconv.Atoi(matches[1])
// 		if err != nil {
// 			w.WriteHeader(http.StatusNotFound)
// 			return
// 		}
// 		switch r.Method {
// 		case http.MethodGet:
// 			c.get(id, w)
// 		case http.MethodPut:
// 		//	uc.put(id, w, r)
// 		case http.MethodDelete:
// 			c.delete(id, w)
// 		default:
// 			w.WriteHeader(http.StatusNotImplemented)
// 		}

// 	}
// }

func getHandler(w http.ResponseWriter, r *http.Request) {

	stringId := r.PathValue("id")
	id, err := strconv.Atoi(stringId)

	if err != nil {
		http.NotFound(w, r)
		return
	}

	data, err := service.Get(id)
	if err != nil {
		if errors.Is(err, service.ErrUserNotFound) {
			w.WriteHeader(http.StatusNotFound)
			errorResp := ErrorResponse{
				Error:   "not found",
				Message: err.Error(),
			}
			encodeResponseAsJSON(errorResp, w)
			return
		}
		// other errors
		w.WriteHeader(http.StatusInternalServerError)
		errorResp := ErrorResponse{
			Error:   "internal_error",
			Message: "An internal error occured",
		}
		encodeResponseAsJSON(errorResp, w)
		return

	}
	encodeResponseAsJSON(data, w)

}

// func (c *controller) get(id int, w http.ResponseWriter) {
// 	data, err := service.Get(id)
// 	if err != nil {
// 		if errors.Is(err, service.ErrUserNotFound) {
// 			w.WriteHeader(http.StatusNotFound)
// 			errorResp := ErrorResponse{
// 				Error:   "not found",
// 				Message: err.Error(),
// 			}
// 			encodeResponseAsJSON(errorResp, w)
// 			return
// 		}
// 		// other errors
// 		w.WriteHeader(http.StatusInternalServerError)
// 		errorResp := ErrorResponse{
// 			Error:   "internal_error",
// 			Message: "An internal error occured",
// 		}
// 		encodeResponseAsJSON(errorResp, w)
// 		return

// 	}
// 	encodeResponseAsJSON(data, w)
// }

// func (c *controller) post(w http.ResponseWriter, r *http.Request) {
// 	data, err := c.parseRequest(r)
// 	if err != nil {
// 		w.WriteHeader(http.StatusBadRequest)
// 		errorResp := ErrorResponse{
// 			Error:   "invalid_request",
// 			Message: err.Error(),
// 		}
// 		encodeResponseAsJSON(errorResp, w)
// 		return
// 	}

// 	data, err = service.Set(data)
// 	if err != nil {
// 		if errors.Is(err, service.ErrValidation) {
// 			w.WriteHeader(http.StatusBadRequest)
// 			errorResp := ErrorResponse{
// 				Error:   "validation_error",
// 				Message: err.Error(),
// 			}
// 			encodeResponseAsJSON(errorResp, w)
// 			return
// 		}
// 		// other errors
// 		w.WriteHeader(http.StatusInternalServerError)
// 		errorResp := ErrorResponse{
// 			Error:   "internal_error",
// 			Message: "An internal error occurred",
// 		}
// 		encodeResponseAsJSON(errorResp, w)
// 		return
// 	}

// 	w.WriteHeader(http.StatusCreated)
// 	encodeResponseAsJSON(data, w)
// }

// func (c *controller) delete(id int, w http.ResponseWriter) {
// 	_, err := service.Delete(id)
// 	if err != nil {
// 		if errors.Is(err, service.ErrUserNotFound) {

// 			errorResp := ErrorResponse{
// 				Error:   "not_found",
// 				Message: err.Error(),
// 			}

// 			w.WriteHeader(http.StatusNotFound)
// 			encodeResponseAsJSON(errorResp, w)

// 			return
// 		}
// 	}
// 	w.WriteHeader(http.StatusOK)
// }

func parseRequest(r *http.Request) (service.Data, error) {

	body, err := io.ReadAll(r.Body)
	if err != nil {
		return service.Data{}, fmt.Errorf("failed to read request body: %w", err)
	}

	var u service.Data
	err = json.Unmarshal(body, &u)
	if err != nil {
		return service.Data{}, fmt.Errorf("failed to parse JSON: %w", err)
	}

	return u, nil
}

func InitHttpServer(addr string) {
	registerHandlers()
	service.Init()
	log.Println("Server listening on", addr)
	if err := http.ListenAndServe(addr, nil); err != nil {
		log.Println("Error starting server:", err)
	}

}
